# This is responsible for the fact that certain math functions are grouped
# together into one documentation page although they are not part of any scope.

- name: variants
  title: Variants
  category: math
  path: ["math"]
<<<<<<< HEAD
  filter: ["serif", "sans", "frak", "mono", "bb", "cal"]
  details: |
    数式中の別書体。

    数式フォントは各文字に対して複数の異体字を備えているため、これらの関数は[`text`]関数とは異なります。
=======
  filter: ["serif", "sans", "frak", "mono", "bb", "cal", "scr"]
  details: |
    Alternate typefaces within formulas.

    These functions are distinct from the [`text`] function because math fonts
    contain multiple variants of each letter.
>>>>>>> dd1e6e94f73db6a257a5ac34a6320e00410a2534

- name: styles
  title: Styles
  category: math
  path: ["math"]
  filter: ["upright", "italic", "bold"]
  details: |
<<<<<<< HEAD
    数式中の別字体。

    数式フォントは各文字に対して複数の異体字を持つため、これらの関数は[`text`]関数とは異なります。
=======
    Alternate letterforms within formulas.

    These functions are distinct from the [`text`] function because math fonts
    contain multiple variants of each letter.
>>>>>>> dd1e6e94f73db6a257a5ac34a6320e00410a2534

- name: sizes
  title: Sizes
  category: math
  path: ["math"]
  filter: ["display", "inline", "script", "sscript"]
  details: |
<<<<<<< HEAD
    数式中の式に大きさに関するスタイルを強制します。

    これらの関数を用いると、数式要素の大きさを、ブロック/インライン数式中や、根号、下付き文字、上付き文字の中で使われているかのようなものに手動で設定できます。
=======
    Forced size styles for expressions within formulas.

    These functions allow manual configuration of the size of equation elements
    to make them look as in a display/inline equation or as if used in a root or
    sub/superscripts.
>>>>>>> dd1e6e94f73db6a257a5ac34a6320e00410a2534

- name: underover
  title: Under/Over
  category: math
  path: ["math"]
<<<<<<< HEAD
  filter:
    [
      "underline",
      "overline",
      "underbrace",
      "overbrace",
      "underbracket",
      "overbracket",
      "underparen",
      "overparen",
      "undershell",
      "overshell",
    ]
  details: |
    数式の一部の上部または下部の区切り文字。

    波括弧や角括弧を用いると、それら自身の上部または下部にオプションの注釈を追加できます。
=======
  filter: [
    "underline",
    "overline",
    "underbrace",
    "overbrace",
    "underbracket",
    "overbracket",
    "underparen",
    "overparen",
    "undershell",
    "overshell",
  ]
  details: |
    Delimiters above or below parts of an equation.

    The braces and brackets further allow you to add an optional annotation
    below or above themselves.
>>>>>>> dd1e6e94f73db6a257a5ac34a6320e00410a2534

- name: roots
  title: Roots
  category: math
  path: ["math"]
  filter: ["root", "sqrt"]
  details: |
<<<<<<< HEAD
    平方根とその他の冪根。

    # 例
=======
    Square and non-square roots.

    # Example
>>>>>>> dd1e6e94f73db6a257a5ac34a6320e00410a2534
    ```example
    $ sqrt(3 - 2 sqrt(2)) = sqrt(2) - 1 $
    $ root(3, x) $
    ```

- name: attach
  title: Attach
  category: math
  path: ["math"]
  filter: ["attach", "scripts", "limits"]
  details: |
<<<<<<< HEAD
    下付き文字、上付き文字、limits。

    アタッチメントは下付き文字、上付き文字、limitsのいずれかで表示することができます。
    Typstはベースに応じてどれがよりふさわしいかを自動的に決定しますが、`scripts`および`limits`関数を用いて手動で制御もできます。

    上部と下部の長いアタッチメント（例えば上部に文字がある矢印）に合うようにベースを伸縮させたい場合は[`stretch`]($math.stretch)関数を使用してください。

    # 例
=======
    Subscript, superscripts, and limits.

    Attachments can be displayed either as sub/superscripts, or limits. Typst
    automatically decides which is more suitable depending on the base, but you
    can also control this manually with the `scripts` and `limits` functions.

    If you want the base to stretch to fit long top and bottom attachments (for
    example, an arrow with text above it), use the [`stretch`]($math.stretch)
    function.

    # Example
>>>>>>> dd1e6e94f73db6a257a5ac34a6320e00410a2534
    ```example
    $ sum_(i=0)^n a_i = 2^(1+i) $
    ```

<<<<<<< HEAD
    # 構文
    この関数にはベースの後ろのアタッチメントのための専用の構文があります。
    下付き文字、すなわち下部のアタッチメントにはアンダースコア（`_`）を、上付き文字、すなわち上部のアタッチメントにはサーカムフレックス（`^`）を使用してください。
=======
    # Syntax
    This function also has dedicated syntax for attachments after the base: Use
    the underscore (`_`) to indicate a subscript i.e. bottom attachment and the
    hat (`^`) to indicate a superscript i.e. top attachment.
>>>>>>> dd1e6e94f73db6a257a5ac34a6320e00410a2534

- name: lr
  title: Left/Right
  category: math
  path: ["math"]
  filter: ["lr", "mid", "abs", "norm", "floor", "ceil", "round"]
  details: |
<<<<<<< HEAD
    区切り文字の対応

    `lr`関数を用いると、2つの区切り文字を対応させ、内部のコンテンツに合わせた大きさに拡大縮小できます。
    これは構文的に対応が取れる区切り文字においては自動的に行われますが、`lr`を用いることで2つの任意の区切り文字を対応させ、その大きさを正確に制御することができます。
    `lr`関数以外にも、Typstは、絶対値、切り捨て値、切り上げ値、ノルムを表す区切り文字ペアを生成する関数をさらにいくつか提供しています。
    # 例
=======
    Delimiter matching.

    The `lr` function allows you to match two delimiters and scale them with the
    content they contain. While this also happens automatically for delimiters
    that match syntactically, `lr` allows you to match two arbitrary delimiters
    and control their size exactly. Apart from the `lr` function, Typst provides
    a few more functions that create delimiter pairings for absolute, ceiled,
    and floored values as well as norms.

    To prevent a delimiter from being matched by Typst, and thus auto-scaled,
    escape it with a backslash. To instead disable auto-scaling completely, use
    `{set math.lr(size: 1em)}`.

    # Example
>>>>>>> dd1e6e94f73db6a257a5ac34a6320e00410a2534
    ```example
    $ [a, b/2] $
    $ lr(]sum_(x=1)^n], size: #50%) x $
    $ abs((x + y) / 2) $
<<<<<<< HEAD
=======
    $ \{ (x / y) \} $
    #set math.lr(size: 1em)
    $ { (a / b), a, b in (0; 1/2] } $
>>>>>>> dd1e6e94f73db6a257a5ac34a6320e00410a2534
    ```

- name: calc
  title: Calculation
  category: foundations
  path: ["calc"]
  details: |
<<<<<<< HEAD
    数値の計算と処理を行うためのモジュール。

    これらの定義は`calc`モジュールの一部であり、デフォルトではインポートされません。
    以下に挙げる関数のほかに、`calc`モジュールは定数`pi`、`tau`、`e`、および`inf`
    を定義しています。
=======
    Module for calculations and processing of numeric values.

    These definitions are part of the `calc` module and not imported by default.
    In addition to the functions listed below, the `calc` module also defines
    the constants `pi`, `tau`, `e`, and `inf`.

- name: std
  title: Standard library
  category: foundations
  path: ["std"]
  details: |
    A module that contains all globally accessible items.

    # Using "shadowed" definitions
    The `std` module is useful whenever you overrode a name from the global
    scope (this is called _shadowing_). For instance, you might have used the
    name `text` for a parameter. To still access the `text` element, write
    `std.text`.

    ```example
    >>> #set page(margin: (left: 3em))
    #let par = [My special paragraph.]
    #let special(text) = {
      set std.text(style: "italic")
      set std.par.line(numbering: "1")
      text
    }

    #special(par)

    #lorem(10)
    ```

    # Conditional access
    You can also use this in combination with the [dictionary
    constructor]($dictionary) to conditionally access global definitions. This
    can, for instance, be useful to use new or experimental functionality when
    it is available, while falling back to an alternative implementation if
    used on an older Typst version. In particular, this allows us to create
    [polyfills](https://en.wikipedia.org/wiki/Polyfill_(programming)).

    This can be as simple as creating an alias to prevent warning messages, for
    example, conditionally using `pattern` in Typst version 0.12, but using
    [`tiling`] in newer versions. Since the parameters accepted by the `tiling`
    function match those of the older `pattern` function, using the `tiling`
    function when available and falling back to `pattern` otherwise will unify
    the usage across all versions. Note that, when creating a polyfill,
    [`sys.version`]($category/foundations/sys) can also be very useful.

    ```typ
    #let tiling = if "tiling" in std { tiling } else { pattern }

    ...
    ```
>>>>>>> dd1e6e94f73db6a257a5ac34a6320e00410a2534

- name: sys
  title: System
  category: foundations
  path: ["sys"]
  details: |
    Module for system interactions.

    This module defines the following items:

    - The `sys.version` constant (of type [`version`]) that specifies
      the currently active Typst compiler version.

    - The `sys.inputs` [dictionary], which makes external inputs
      available to the project. An input specified in the command line as
      `--input key=value` becomes available under `sys.inputs.key` as
      `{"value"}`. To include spaces in the value, it may be enclosed with
      single or double quotes.

      The value is always of type [string]($str). More complex data
<<<<<<< HEAD
      may be parsed manually using functions like [`json.decode`]($json.decode).
=======
      may be parsed manually using functions like [`json`]($json).
>>>>>>> dd1e6e94f73db6a257a5ac34a6320e00410a2534

- name: sym
  title: General
  category: symbols
  path: ["sym"]
  details: |
    Named general symbols.

    For example, `#sym.arrow` produces the → symbol. Within
    [formulas]($category/math), these symbols can be used without the `#sym.`
    prefix.

    The `d` in an integral's `dx` can be written as `[$dif x$]`.
    Outside math formulas, `dif` can be accessed as `math.dif`.

- name: emoji
  title: Emoji
  category: symbols
  path: ["emoji"]
  details: |
<<<<<<< HEAD
    Named emoji.

    For example, `#emoji.face` produces the 😀 emoji. If you frequently use
    certain emojis, you can also import them from the `emoji` module (`[#import
    emoji: face]`) to use them without the `#emoji.` prefix.
=======
    Named emojis.

    For example, `#emoji.face` produces the 😀 emoji. If you frequently use
    certain emojis, you can also import them from the `emoji` module (`[#import
    emoji: face]`) to use them without the `emoji.` prefix.

- name: typed
  title: Typed HTML
  category: html
  path: ["html"]
  details: |
    A typed layer over raw HTML elements.

    The `html` module provides a typed layer over the raw [`html.elem`] function
    that allows you to conveniently create HTML elements. HTML attributes are
    exposed as function parameters that accept Typst types and automatically
    take care of converting those into the appropriate HTML.

    Some parameters are common to all typed HTML functions. These are listed at
    the bottom in the [Global Attributes](#global-attributes) section instead of
    explicitly on each element for readability.

    # Example
    ```typ
    #html.video(
      controls: true,
      width: 1280,
      height: 720,
      src: "sunrise.mp4",
    )[
      Your browser does not support the video tag.
    ]
    ```
>>>>>>> dd1e6e94f73db6a257a5ac34a6320e00410a2534
